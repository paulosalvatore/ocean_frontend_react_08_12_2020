{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","Board","index","this","squares","renderSquare","React","Component","Game","state","Array","fill","nextMove","calculateWinner","setState","hasWinner","winner","filledSquares","filter","Boolean","draw","length","i","handleClick","restartGame","some","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"kQAIA,SAASA,EAAOC,GACZ,OACI,wBAAQC,UAAU,SAASC,QAASF,EAAME,QAA1C,SACKF,EAAMG,Q,IAKbC,E,2KACWC,GAAQ,IAAD,OAChB,OAAO,cAACN,EAAD,CAAQI,MAAOG,KAAKN,MAAMO,QAAQF,GAAQH,QAAS,kBAAM,EAAKF,MAAME,QAAQG,Q,+BAInF,OACI,gCACI,sBAAKJ,UAAU,YAAf,UACKK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,MAEvB,sBAAKP,UAAU,YAAf,UACKK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,MAEvB,sBAAKP,UAAU,YAAf,UACKK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,a,GArBnBC,IAAMC,WA4BpBC,E,kDAOF,WAAYX,GAAQ,IAAD,8BAGf,cAAMA,IAIDY,MAAQ,CACTL,QAASM,MAAM,GAAGC,KAAK,MACvBC,SAAU,KATC,E,wDAaPV,GACR,IAAME,EAAUD,KAAKM,MAAML,QAE3B,IAAIA,EAAQF,KAAUW,EAAgBT,GAAtC,CAIAA,EAAQF,GAASC,KAAKM,MAAMG,SAE5B,IAAMA,EAAmC,MAAxBT,KAAKM,MAAMG,SAAmB,IAAM,IAGrDT,KAAKW,SAAS,CAAEF,gB,oCAIhBT,KAAKW,SAAS,CACVV,QAASM,MAAM,GAAGC,KAAK,MACvBC,SAAU,Q,+BAIR,IAAD,OACCR,EAAUD,KAAKM,MAAML,QAGrBQ,EAAWT,KAAKM,MAAMG,SAGtBG,EAAYF,EAAgBT,GAC5BY,EAAsB,MAAbJ,EAAmB,IAAK,IAGjCK,EAAgBb,EAAQc,OAAOC,SAC/BC,GAAQL,GAAaE,EAAcI,SAAWjB,EAAQiB,OAE5D,OACI,sBAAKvB,UAAU,OAAf,UACI,qBAAKA,UAAU,aAAf,SACI,cAACG,EAAD,CAAOG,QAASD,KAAKM,MAAML,QAASL,QAAS,SAACuB,GAAD,OAAO,EAAKC,YAAYD,QAGzE,sBAAKxB,UAAU,YAAf,UACMiB,GAAcK,EAAuC,GAAhC,sBAAqBR,EAC3CG,EAAYC,EAAS,YAAc,GACnCI,EAAO,cAAgB,GAAG,uBAC3B,uBACA,wBAAQrB,QAAS,kBAAM,EAAKyB,eAA5B,sC,GAnEDlB,IAAMC,WAmFzB,SAASM,EAAgBT,GAwBrB,MAvBc,CACV,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAeEqB,MAAK,mCAAEC,EAAF,KAAKC,EAAL,KAAQC,EAAR,YAAexB,EAAQsB,IAAMtB,EAAQsB,KAAOtB,EAAQuB,IAAMvB,EAAQsB,KAAOtB,EAAQwB,MAjCvGC,IAASC,OAEL,cAACtB,EAAD,IAEAuB,SAASC,eAAe,W","file":"static/js/main.058471ee.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nfunction Square(props) {\n    return (\n        <button className=\"square\" onClick={props.onClick}>\n            {props.value}\n        </button>\n    );\n}\n\nclass Board extends React.Component {\n    renderSquare(index) {\n        return <Square value={this.props.squares[index]} onClick={() => this.props.onClick(index)}/>;\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"board-row\">\n                    {this.renderSquare(0)}\n                    {this.renderSquare(1)}\n                    {this.renderSquare(2)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(3)}\n                    {this.renderSquare(4)}\n                    {this.renderSquare(5)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(6)}\n                    {this.renderSquare(7)}\n                    {this.renderSquare(8)}\n                </div>\n            </div>\n        );\n    }\n}\n\nclass Game extends React.Component {\n\n    // Criamos um construtor sempre que precisamos obter as propriedades\n    // de um componente do React que seja uma class\n    // Também fazemos isso quando precisamos declarar o estado inicial\n    // O construtor será executado sempre que o componente for criado\n    // Caso contrário, não precisamos nem declarar o construtor\n    constructor(props) {\n        // Props são as propriedades iniciais daquele componente\n        // Envia as props e constrói o React.Component\n        super(props);\n\n        // Declaração do estado inicial com um objeto inicial\n        // Estados servem para serem alterados depois da inicialização do componente\n        this.state = {\n            squares: Array(9).fill(null),\n            nextMove: 'X'\n        };\n    }\n\n    handleClick(index) {\n        const squares = this.state.squares;\n\n        if (squares[index] || calculateWinner(squares)) {\n            return;\n        }\n\n        squares[index] = this.state.nextMove;\n\n        const nextMove = this.state.nextMove === 'X' ? 'O' : 'X';\n\n        // Atualiza o estado do componente, passando um novo objeto para ele\n        this.setState({ nextMove });\n    }\n\n    restartGame() {\n        this.setState({\n            squares: Array(9).fill(null),\n            nextMove: 'X'\n        });\n    }\n\n    render() {\n        const squares = this.state.squares;\n\n        // Next Move\n        const nextMove = this.state.nextMove;\n\n        // Winner\n        const hasWinner = calculateWinner(squares);\n        const winner = nextMove === 'X' ? 'O': 'X';\n\n        // Draw\n        const filledSquares = squares.filter(Boolean);\n        const draw = !hasWinner && filledSquares.length === squares.length;\n\n        return (\n            <div className=\"game\">\n                <div className=\"game-board\">\n                    <Board squares={this.state.squares} onClick={(i) => this.handleClick(i)}/>\n                </div>\n\n                <div className=\"game-info\">\n                    {!hasWinner && !draw ? 'Próxima jogada: ' + nextMove : ''}\n                    {hasWinner ? winner + ' venceu!!' : ''}\n                    {draw ? 'Deu velha!!' : ''}<br/>\n                    <br/>\n                    <button onClick={() => this.restartGame()}>Reiniciar jogo</button>\n                </div>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(\n    // Elemento que será renderizado\n    <Game/>,\n    // Local em que esse elemento será renderizado\n    document.getElementById('root')\n);\n\n// É interessante separar essa função pois ela não depende do React para acontecer\n// Dessa forma, podemos testá-la separadamente.\nfunction calculateWinner(squares) {\n    const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6]\n    ];\n\n    /*\n    for (const line of lines) {\n        const [a, b, c] = line;\n\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n            return true;\n        }\n    }\n\n    return false;\n    */\n\n    return lines.some(([a, b, c]) => squares[a] && squares[a] === squares[b] && squares[a] === squares[c]);\n}\n"],"sourceRoot":""}